/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
 
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ReferralPositionFeeStruct = {
  feeForPoolAmount: PromiseOrValue<BigNumberish>;
  feeForPoolUsd: PromiseOrValue<BigNumberish>;
  rebateAmount: PromiseOrValue<BigNumberish>;
  rebateUsd: PromiseOrValue<BigNumberish>;
};

export type ReferralPositionFeeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  feeForPoolAmount: BigNumber;
  feeForPoolUsd: BigNumber;
  rebateAmount: BigNumber;
  rebateUsd: BigNumber;
};

export type TierStruct = {
  id: PromiseOrValue<BigNumberish>;
  rebate: PromiseOrValue<BigNumberish>;
  discount: PromiseOrValue<BigNumberish>;
};

export type TierStructOutput = [BigNumber, BigNumber, BigNumber] & {
  id: BigNumber;
  rebate: BigNumber;
  discount: BigNumber;
};

export type ReferralInfoStruct = {
  code: PromiseOrValue<BytesLike>;
  affiliate: PromiseOrValue<string>;
  isActive: PromiseOrValue<boolean>;
  tier: TierStruct;
};

export type ReferralInfoStructOutput = [
  string,
  string,
  boolean,
  TierStructOutput
] & {
  code: string;
  affiliate: string;
  isActive: boolean;
  tier: TierStructOutput;
};

export interface ReferralManagerInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "HANDLER_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "affiliateRewards(address,address)": FunctionFragment;
    "affiliateTiers(address)": FunctionFragment;
    "claimAffiliateReward()": FunctionFragment;
    "codeOwners(bytes32)": FunctionFragment;
    "discountPositionFee(address,address,uint256,uint256,uint256)": FunctionFragment;
    "feeFlpTracker()": FunctionFragment;
    "flpThreshold()": FunctionFragment;
    "getAffiliateReward(address)": FunctionFragment;
    "getReferralInfoByAffiliate(address)": FunctionFragment;
    "getReferralInfoByCode(bytes32)": FunctionFragment;
    "getReferralInfoByTrader(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "ownerCodes(address)": FunctionFragment;
    "registerAffiliate()": FunctionFragment;
    "registerAffiliateByAdmin(address,bytes32)": FunctionFragment;
    "removeTraderReferralCode()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAffiliateTier(address,uint256)": FunctionFragment;
    "setFlpThreshold(uint256)": FunctionFragment;
    "setTier(uint256,uint256,uint256)": FunctionFragment;
    "setTraderReferralCode(address,bytes32)": FunctionFragment;
    "setTraderReferralCodeByUser(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tiers(uint256)": FunctionFragment;
    "traderReferralCodes(address)": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "BASIS_POINTS_DIVISOR"
      | "DEFAULT_ADMIN_ROLE"
      | "HANDLER_ROLE"
      | "KEEPER_ROLE"
      | "affiliateRewards"
      | "affiliateTiers"
      | "claimAffiliateReward"
      | "codeOwners"
      | "discountPositionFee"
      | "feeFlpTracker"
      | "flpThreshold"
      | "getAffiliateReward"
      | "getReferralInfoByAffiliate"
      | "getReferralInfoByCode"
      | "getReferralInfoByTrader"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "ownerCodes"
      | "registerAffiliate"
      | "registerAffiliateByAdmin"
      | "removeTraderReferralCode"
      | "renounceRole"
      | "revokeRole"
      | "setAffiliateTier"
      | "setFlpThreshold"
      | "setTier"
      | "setTraderReferralCode"
      | "setTraderReferralCodeByUser"
      | "supportsInterface"
      | "tiers"
      | "traderReferralCodes"
      | "transferAdmin"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HANDLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateTiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAffiliateReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "codeOwners",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "discountPositionFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeFlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flpThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfoByAffiliate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfoByCode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfoByTrader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCodes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAffiliate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAffiliateByAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTraderReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliateTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlpThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderReferralCode",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderReferralCodeByUser",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tiers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "traderReferralCodes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HANDLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAffiliateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codeOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeFlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flpThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfoByAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfoByCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfoByTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAffiliateByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTraderReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliateTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlpThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTraderReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderReferralCodeByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traderReferralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AffiliateRewardClaimed(address,address[],uint256[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ReferralDiscount(bytes32,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RegisterCode(address,bytes32)": EventFragment;
    "RemoveTraderReferralCode(address,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetAffiliateTier(address,uint256)": EventFragment;
    "SetTier(uint256,uint256,uint256)": EventFragment;
    "SetTraderReferralCode(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffiliateRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralDiscount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterCode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTraderReferralCode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAffiliateTier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTraderReferralCode"): EventFragment;
}

export interface AffiliateRewardClaimedEventObject {
  affiliate: string;
  tokens: string[];
  amounts: BigNumber[];
}
export type AffiliateRewardClaimedEvent = TypedEvent<
  [string, string[], BigNumber[]],
  AffiliateRewardClaimedEventObject
>;

export type AffiliateRewardClaimedEventFilter =
  TypedEventFilter<AffiliateRewardClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ReferralDiscountEventObject {
  code: string;
  affiliate: string;
  trader: string;
  token: string;
  traderDiscountAmount: BigNumber;
  affiliateRewardAmount: BigNumber;
  tokenPrice: BigNumber;
  sizeDelta: BigNumber;
}
export type ReferralDiscountEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ReferralDiscountEventObject
>;

export type ReferralDiscountEventFilter =
  TypedEventFilter<ReferralDiscountEvent>;

export interface RegisterCodeEventObject {
  affiliate: string;
  code: string;
}
export type RegisterCodeEvent = TypedEvent<
  [string, string],
  RegisterCodeEventObject
>;

export type RegisterCodeEventFilter = TypedEventFilter<RegisterCodeEvent>;

export interface RemoveTraderReferralCodeEventObject {
  trader: string;
  code: string;
}
export type RemoveTraderReferralCodeEvent = TypedEvent<
  [string, string],
  RemoveTraderReferralCodeEventObject
>;

export type RemoveTraderReferralCodeEventFilter =
  TypedEventFilter<RemoveTraderReferralCodeEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetAffiliateTierEventObject {
  affiliate: string;
  tierId: BigNumber;
}
export type SetAffiliateTierEvent = TypedEvent<
  [string, BigNumber],
  SetAffiliateTierEventObject
>;

export type SetAffiliateTierEventFilter =
  TypedEventFilter<SetAffiliateTierEvent>;

export interface SetTierEventObject {
  tierId: BigNumber;
  totalRebate: BigNumber;
  discountShare: BigNumber;
}
export type SetTierEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetTierEventObject
>;

export type SetTierEventFilter = TypedEventFilter<SetTierEvent>;

export interface SetTraderReferralCodeEventObject {
  trader: string;
  code: string;
}
export type SetTraderReferralCodeEvent = TypedEvent<
  [string, string],
  SetTraderReferralCodeEventObject
>;

export type SetTraderReferralCodeEventFilter =
  TypedEventFilter<SetTraderReferralCodeEvent>;

export interface ReferralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    HANDLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    affiliateRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    affiliateTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAffiliateReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    codeOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    discountPositionFee(
      _trader: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _positionFeeUsd: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeFlpTracker(overrides?: CallOverrides): Promise<[string]>;

    flpThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAffiliateReward(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getReferralInfoByAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReferralInfoStructOutput]>;

    getReferralInfoByCode(
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ReferralInfoStructOutput]>;

    getReferralInfoByTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReferralInfoStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _vault: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerAffiliate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAffiliateByAdmin(
      _affiliate: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTraderReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAffiliateTier(
      _affiliate: PromiseOrValue<string>,
      _tierId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlpThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTier(
      _tierId: PromiseOrValue<BigNumberish>,
      _rebate: PromiseOrValue<BigNumberish>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTraderReferralCode(
      _trader: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTraderReferralCodeByUser(
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        rebate: BigNumber;
        discount: BigNumber;
      }
    >;

    traderReferralCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  HANDLER_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  affiliateRewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  affiliateTiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAffiliateReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  codeOwners(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  discountPositionFee(
    _trader: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenPrice: PromiseOrValue<BigNumberish>,
    _positionFeeUsd: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeFlpTracker(overrides?: CallOverrides): Promise<string>;

  flpThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getAffiliateReward(
    _affiliate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getReferralInfoByAffiliate(
    _affiliate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReferralInfoStructOutput>;

  getReferralInfoByCode(
    _code: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ReferralInfoStructOutput>;

  getReferralInfoByTrader(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReferralInfoStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _vault: PromiseOrValue<string>,
    _feeFlpTracker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerCodes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerAffiliate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAffiliateByAdmin(
    _affiliate: PromiseOrValue<string>,
    _code: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTraderReferralCode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAffiliateTier(
    _affiliate: PromiseOrValue<string>,
    _tierId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlpThreshold(
    _newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTier(
    _tierId: PromiseOrValue<BigNumberish>,
    _rebate: PromiseOrValue<BigNumberish>,
    _discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTraderReferralCode(
    _trader: PromiseOrValue<string>,
    _code: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTraderReferralCodeByUser(
    _code: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tiers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      rebate: BigNumber;
      discount: BigNumber;
    }
  >;

  traderReferralCodes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferAdmin(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    HANDLER_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    affiliateRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliateTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAffiliateReward(overrides?: CallOverrides): Promise<void>;

    codeOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    discountPositionFee(
      _trader: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _positionFeeUsd: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReferralPositionFeeStructOutput>;

    feeFlpTracker(overrides?: CallOverrides): Promise<string>;

    flpThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getAffiliateReward(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getReferralInfoByAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReferralInfoStructOutput>;

    getReferralInfoByCode(
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ReferralInfoStructOutput>;

    getReferralInfoByTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReferralInfoStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _vault: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerAffiliate(overrides?: CallOverrides): Promise<void>;

    registerAffiliateByAdmin(
      _affiliate: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTraderReferralCode(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAffiliateTier(
      _affiliate: PromiseOrValue<string>,
      _tierId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlpThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTier(
      _tierId: PromiseOrValue<BigNumberish>,
      _rebate: PromiseOrValue<BigNumberish>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderReferralCode(
      _trader: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderReferralCodeByUser(
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        rebate: BigNumber;
        discount: BigNumber;
      }
    >;

    traderReferralCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AffiliateRewardClaimed(address,address[],uint256[])"(
      affiliate?: null,
      tokens?: null,
      amounts?: null
    ): AffiliateRewardClaimedEventFilter;
    AffiliateRewardClaimed(
      affiliate?: null,
      tokens?: null,
      amounts?: null
    ): AffiliateRewardClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ReferralDiscount(bytes32,address,address,address,uint256,uint256,uint256,uint256)"(
      code?: null,
      affiliate?: null,
      trader?: null,
      token?: null,
      traderDiscountAmount?: null,
      affiliateRewardAmount?: null,
      tokenPrice?: null,
      sizeDelta?: null
    ): ReferralDiscountEventFilter;
    ReferralDiscount(
      code?: null,
      affiliate?: null,
      trader?: null,
      token?: null,
      traderDiscountAmount?: null,
      affiliateRewardAmount?: null,
      tokenPrice?: null,
      sizeDelta?: null
    ): ReferralDiscountEventFilter;

    "RegisterCode(address,bytes32)"(
      affiliate?: null,
      code?: null
    ): RegisterCodeEventFilter;
    RegisterCode(affiliate?: null, code?: null): RegisterCodeEventFilter;

    "RemoveTraderReferralCode(address,bytes32)"(
      trader?: null,
      code?: null
    ): RemoveTraderReferralCodeEventFilter;
    RemoveTraderReferralCode(
      trader?: null,
      code?: null
    ): RemoveTraderReferralCodeEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetAffiliateTier(address,uint256)"(
      affiliate?: null,
      tierId?: null
    ): SetAffiliateTierEventFilter;
    SetAffiliateTier(
      affiliate?: null,
      tierId?: null
    ): SetAffiliateTierEventFilter;

    "SetTier(uint256,uint256,uint256)"(
      tierId?: null,
      totalRebate?: null,
      discountShare?: null
    ): SetTierEventFilter;
    SetTier(
      tierId?: null,
      totalRebate?: null,
      discountShare?: null
    ): SetTierEventFilter;

    "SetTraderReferralCode(address,bytes32)"(
      trader?: null,
      code?: null
    ): SetTraderReferralCodeEventFilter;
    SetTraderReferralCode(
      trader?: null,
      code?: null
    ): SetTraderReferralCodeEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    HANDLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    affiliateRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliateTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAffiliateReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    codeOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    discountPositionFee(
      _trader: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _positionFeeUsd: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeFlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    flpThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getAffiliateReward(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralInfoByAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralInfoByCode(
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralInfoByTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _vault: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAffiliate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAffiliateByAdmin(
      _affiliate: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTraderReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAffiliateTier(
      _affiliate: PromiseOrValue<string>,
      _tierId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlpThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTier(
      _tierId: PromiseOrValue<BigNumberish>,
      _rebate: PromiseOrValue<BigNumberish>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTraderReferralCode(
      _trader: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTraderReferralCodeByUser(
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traderReferralCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HANDLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    affiliateRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliateTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAffiliateReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    codeOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountPositionFee(
      _trader: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _positionFeeUsd: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeFlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flpThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAffiliateReward(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralInfoByAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralInfoByCode(
      _code: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralInfoByTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _vault: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAffiliate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAffiliateByAdmin(
      _affiliate: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTraderReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAffiliateTier(
      _affiliate: PromiseOrValue<string>,
      _tierId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlpThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTier(
      _tierId: PromiseOrValue<BigNumberish>,
      _rebate: PromiseOrValue<BigNumberish>,
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTraderReferralCode(
      _trader: PromiseOrValue<string>,
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTraderReferralCodeByUser(
      _code: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderReferralCodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
