/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IVaultUtils {
  export type PositionStruct = {
    size: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    averagePrice: PromiseOrValue<BigNumberish>;
    entryFundingRate: PromiseOrValue<BigNumberish>;
    reserveAmount: PromiseOrValue<BigNumberish>;
    realisedPnl: PromiseOrValue<BigNumberish>;
    lastIncreasedTime: PromiseOrValue<BigNumberish>;
    brokerAddress: PromiseOrValue<string>;
    brokerFeeBasisPoints: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    size: BigNumber;
    collateral: BigNumber;
    averagePrice: BigNumber;
    entryFundingRate: BigNumber;
    reserveAmount: BigNumber;
    realisedPnl: BigNumber;
    lastIncreasedTime: BigNumber;
    brokerAddress: string;
    brokerFeeBasisPoints: BigNumber;
  };
}

export interface VaultUtilsInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "FUNDING_RATE_PRECISION()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "USDG_DECIMALS()": FunctionFragment;
    "adjustForDecimals(uint256,address,address)": FunctionFragment;
    "getBrokerFee(uint256,uint256)": FunctionFragment;
    "getBuyUsdgFeeBasisPoints(address,uint256)": FunctionFragment;
    "getDelta(address,uint256,uint256,bool,uint256)": FunctionFragment;
    "getEntryFundingRate(address,address,bool)": FunctionFragment;
    "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getFundingFee(address,address,address,bool,uint256,uint256)": FunctionFragment;
    "getGlobalShortDelta(address)": FunctionFragment;
    "getLiquidationFee(uint256)": FunctionFragment;
    "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "getNextFundingRate(address)": FunctionFragment;
    "getNextGlobalShortAveragePrice(address,uint256,uint256)": FunctionFragment;
    "getPosition(address,address,address,bool)": FunctionFragment;
    "getPositionBroker(address,address,address,bool)": FunctionFragment;
    "getPositionDelta(address,address,address,bool)": FunctionFragment;
    "getPositionFee(uint256)": FunctionFragment;
    "getPositionFeeForBot(uint256)": FunctionFragment;
    "getPositionLeverage(address,address,address,bool)": FunctionFragment;
    "getRedemptionAmount(address,uint256)": FunctionFragment;
    "getSellUsdgFeeBasisPoints(address,uint256)": FunctionFragment;
    "getSwapFeeBasisPoints(address,address,uint256)": FunctionFragment;
    "getTargetUsdgAmount(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "timelock()": FunctionFragment;
    "updateCumulativeFundingRate(address,address)": FunctionFragment;
    "validateBufferAmount(address)": FunctionFragment;
    "validateDecreasePosition(address,address,address,uint256,uint256,bool,address)": FunctionFragment;
    "validateIncreasePosition(address,address,address,uint256,bool)": FunctionFragment;
    "validateLiquidation(address,address,address,bool,bool)": FunctionFragment;
    "validateLiquidationForBot(address,address,address,bool,bool)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "FUNDING_RATE_PRECISION"
      | "PRICE_PRECISION"
      | "USDG_DECIMALS"
      | "adjustForDecimals"
      | "getBrokerFee"
      | "getBuyUsdgFeeBasisPoints"
      | "getDelta"
      | "getEntryFundingRate"
      | "getFeeBasisPoints"
      | "getFundingFee"
      | "getGlobalShortDelta"
      | "getLiquidationFee"
      | "getNextAveragePrice"
      | "getNextFundingRate"
      | "getNextGlobalShortAveragePrice"
      | "getPosition"
      | "getPositionBroker"
      | "getPositionDelta"
      | "getPositionFee"
      | "getPositionFeeForBot"
      | "getPositionLeverage"
      | "getRedemptionAmount"
      | "getSellUsdgFeeBasisPoints"
      | "getSwapFeeBasisPoints"
      | "getTargetUsdgAmount"
      | "gov"
      | "initialize"
      | "setGov"
      | "setTimelock"
      | "timelock"
      | "updateCumulativeFundingRate"
      | "validateBufferAmount"
      | "validateDecreasePosition"
      | "validateIncreasePosition"
      | "validateLiquidation"
      | "validateLiquidationForBot"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNDING_RATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustForDecimals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBrokerFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyUsdgFeeBasisPoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryFundingRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalShortDelta",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAveragePrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextFundingRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextGlobalShortAveragePrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionBroker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDelta",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFeeForBot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLeverage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellUsdgFeeBasisPoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeeBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetUsdgAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeFundingRate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBufferAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDecreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIncreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateLiquidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateLiquidationForBot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNDING_RATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustForDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBrokerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyUsdgFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalShortDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextGlobalShortAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFeeForBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellUsdgFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetUsdgAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBufferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidationForBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "UpdateGov(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGov"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpdateGovEventObject {
  gov: string;
}
export type UpdateGovEvent = TypedEvent<[string], UpdateGovEventObject>;

export type UpdateGovEventFilter = TypedEventFilter<UpdateGovEvent>;

export interface VaultUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBrokerFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _brokerFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingFee(
      arg0: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getLiquidationFee(
      remainingCollateralUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[IVaultUtils.PositionStructOutput]>;

    getPositionBroker(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionFeeForBot(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapFeeBasisPoints(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetUsdgAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vault: PromiseOrValue<string>,
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    updateCumulativeFundingRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateBufferAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateDecreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<boolean>,
      arg6: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateIncreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    validateLiquidationForBot(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  adjustForDecimals(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenDiv: PromiseOrValue<string>,
    _tokenMul: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBrokerFee(
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _brokerFeeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyUsdgFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDelta(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getEntryFundingRate(
    _collateralToken: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgDelta: PromiseOrValue<BigNumberish>,
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _increment: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingFee(
    arg0: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<boolean>,
    _size: PromiseOrValue<BigNumberish>,
    _entryFundingRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGlobalShortDelta(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getLiquidationFee(
    remainingCollateralUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextAveragePrice(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextFundingRate(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextGlobalShortAveragePrice(
    _indexToken: PromiseOrValue<string>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<IVaultUtils.PositionStructOutput>;

  getPositionBroker(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getPositionDelta(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getPositionFee(
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionFeeForBot(
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionLeverage(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionAmount(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellUsdgFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapFeeBasisPoints(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetUsdgAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vault: PromiseOrValue<string>,
    _timelock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timelock(overrides?: CallOverrides): Promise<string>;

  updateCumulativeFundingRate(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateBufferAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateDecreasePosition(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<boolean>,
    arg6: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateIncreasePosition(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateLiquidation(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _raise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  validateLiquidationForBot(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _raise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBrokerFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _brokerFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      arg0: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getLiquidationFee(
      remainingCollateralUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<IVaultUtils.PositionStructOutput>;

    getPositionBroker(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFeeForBot(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeeBasisPoints(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetUsdgAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _vault: PromiseOrValue<string>,
      _timelock: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    timelock(overrides?: CallOverrides): Promise<string>;

    updateCumulativeFundingRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateBufferAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateDecreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<boolean>,
      arg6: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateIncreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    validateLiquidationForBot(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "UpdateGov(address)"(gov?: null): UpdateGovEventFilter;
    UpdateGov(gov?: null): UpdateGovEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBrokerFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _brokerFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      arg0: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationFee(
      remainingCollateralUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionBroker(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFeeForBot(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeeBasisPoints(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetUsdgAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: PromiseOrValue<string>,
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    updateCumulativeFundingRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateBufferAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateDecreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<boolean>,
      arg6: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateIncreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateLiquidationForBot(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNDING_RATE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBrokerFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _brokerFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFee(
      arg0: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationFee(
      remainingCollateralUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionBroker(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFeeForBot(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellUsdgFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFeeBasisPoints(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetUsdgAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vault: PromiseOrValue<string>,
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCumulativeFundingRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateBufferAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateDecreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<boolean>,
      arg6: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIncreasePosition(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidationForBot(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
