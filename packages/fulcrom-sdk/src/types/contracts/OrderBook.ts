/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OrderBook {
  export type IncreaseOrderStruct = {
    account: PromiseOrValue<string>;
    purchaseToken: PromiseOrValue<string>;
    purchaseTokenAmount: PromiseOrValue<BigNumberish>;
    collateralToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    triggerAboveThreshold: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
    tpSlExecutionFee: PromiseOrValue<BigNumberish>;
  };

  export type IncreaseOrderStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    purchaseToken: string;
    purchaseTokenAmount: BigNumber;
    collateralToken: string;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
    tpSlExecutionFee: BigNumber;
  };

  export type IncreaseOrderParamsStruct = {
    path: PromiseOrValue<string>[];
    amountIn: PromiseOrValue<BigNumberish>;
    indexToken: PromiseOrValue<string>;
    minOut: PromiseOrValue<BigNumberish>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    collateralToken: PromiseOrValue<string>;
    isLong: PromiseOrValue<boolean>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    triggerAboveThreshold: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    shouldWrap: PromiseOrValue<boolean>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
  };

  export type IncreaseOrderParamsStructOutput = [
    string[],
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    path: string[];
    amountIn: BigNumber;
    indexToken: string;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    collateralToken: string;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
    shouldWrap: boolean;
    tp: BigNumber;
    sl: BigNumber;
  };
}

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "PRICE_PRECISION()": FunctionFragment;
    "USDG_PRECISION()": FunctionFragment;
    "cancelDecreaseOrder(uint256)": FunctionFragment;
    "cancelIncreaseOrder(uint256)": FunctionFragment;
    "cancelMultiple(uint256[],uint256[],uint256[])": FunctionFragment;
    "cancelSwapOrder(uint256)": FunctionFragment;
    "createDecreaseOrder(address,uint256,address,uint256,bool,uint256,bool)": FunctionFragment;
    "createDecreaseOrderForAccount(address,address,uint256,address,uint256,bool,uint256,bool)": FunctionFragment;
    "createIncreaseOrder(address[],uint256,address,uint256,uint256,address,bool,uint256,bool,uint256,bool)": FunctionFragment;
    "createIncreaseOrderV2((address[],uint256,address,uint256,uint256,address,bool,uint256,bool,uint256,bool,uint256,uint256))": FunctionFragment;
    "createSwapOrder(address[],uint256,uint256,uint256,bool,uint256,bool,bool)": FunctionFragment;
    "decreaseOrders(address,uint256)": FunctionFragment;
    "decreaseOrdersIndex(address)": FunctionFragment;
    "executeDecreaseOrder(address,uint256,address)": FunctionFragment;
    "executeIncreaseOrder(address,uint256,address)": FunctionFragment;
    "executeSwapOrder(address,uint256,address)": FunctionFragment;
    "getDecreaseOrder(address,uint256)": FunctionFragment;
    "getIncreaseOrder(address,uint256)": FunctionFragment;
    "getSwapOrder(address,uint256)": FunctionFragment;
    "getUsdgMinPrice(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "increaseOrders(address,uint256)": FunctionFragment;
    "increaseOrdersIndex(address)": FunctionFragment;
    "initOrderBook(address,address,address,address,uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "minExecutionFee()": FunctionFragment;
    "minPurchaseTokenAmountUsd()": FunctionFragment;
    "positionRouter()": FunctionFragment;
    "quoteExecutionFeeAdjustment(address,uint256,uint256,uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setMinExecutionFee(uint256)": FunctionFragment;
    "setMinPurchaseTokenAmountUsd(uint256)": FunctionFragment;
    "setPositionRouter(address)": FunctionFragment;
    "swapOrders(address,uint256)": FunctionFragment;
    "swapOrdersIndex(address)": FunctionFragment;
    "updateDecreaseOrder(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateIncreaseOrder(uint256,uint256,uint256,bool)": FunctionFragment;
    "updateIncreaseOrderV2(uint256,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "updateSwapOrder(uint256,uint256,uint256,bool)": FunctionFragment;
    "usdg()": FunctionFragment;
    "validatePositionOrderPrice(bool,uint256,address,bool,bool)": FunctionFragment;
    "validateSwapOrderPriceWithTriggerAboveThreshold(address[],uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRICE_PRECISION"
      | "USDG_PRECISION"
      | "cancelDecreaseOrder"
      | "cancelIncreaseOrder"
      | "cancelMultiple"
      | "cancelSwapOrder"
      | "createDecreaseOrder"
      | "createDecreaseOrderForAccount"
      | "createIncreaseOrder"
      | "createIncreaseOrderV2"
      | "createSwapOrder"
      | "decreaseOrders"
      | "decreaseOrdersIndex"
      | "executeDecreaseOrder"
      | "executeIncreaseOrder"
      | "executeSwapOrder"
      | "getDecreaseOrder"
      | "getIncreaseOrder"
      | "getSwapOrder"
      | "getUsdgMinPrice"
      | "gov"
      | "increaseOrders"
      | "increaseOrdersIndex"
      | "initOrderBook"
      | "initialize"
      | "isInitialized"
      | "minExecutionFee"
      | "minPurchaseTokenAmountUsd"
      | "positionRouter"
      | "quoteExecutionFeeAdjustment"
      | "router"
      | "setGov"
      | "setMinExecutionFee"
      | "setMinPurchaseTokenAmountUsd"
      | "setPositionRouter"
      | "swapOrders"
      | "swapOrdersIndex"
      | "updateDecreaseOrder"
      | "updateIncreaseOrder"
      | "updateIncreaseOrderV2"
      | "updateSwapOrder"
      | "usdg"
      | "validatePositionOrderPrice"
      | "validateSwapOrderPriceWithTriggerAboveThreshold"
      | "vault"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreaseOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultiple",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwapOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseOrderForAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseOrder",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseOrderV2",
    values: [OrderBook.IncreaseOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSwapOrder",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrdersIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreaseOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdgMinPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseOrdersIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initOrderBook",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchaseTokenAmountUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExecutionFeeAdjustment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrdersIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDecreaseOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseOrderV2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validatePositionOrderPrice",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseOrderForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseOrderV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdgMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExecutionFeeAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseOrderV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePositionOrderPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "CancelDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CancelIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CancelSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "CreateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CreateIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CreateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "ExecuteDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256,uint256)": EventFragment;
    "ExecuteIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256,uint256)": EventFragment;
    "ExecuteSwapOrder(address,uint256,address[],uint256,uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "IncreaseOrderCancelled(address,uint256,tuple)": EventFragment;
    "IncreaseOrderCreated(address,uint256,tuple)": EventFragment;
    "IncreaseOrderExecuted(address,uint256,uint256,tuple)": EventFragment;
    "IncreaseOrderUpdated(address,uint256,tuple)": EventFragment;
    "Initialize(address,address,address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "UpdateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool)": EventFragment;
    "UpdateGov(address)": EventFragment;
    "UpdateIncreaseOrder(address,uint256,address,address,bool,uint256,uint256,bool)": EventFragment;
    "UpdateMinExecutionFee(uint256)": EventFragment;
    "UpdateMinPurchaseTokenAmountUsd(uint256)": EventFragment;
    "UpdateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinExecutionFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateMinPurchaseTokenAmountUsd"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSwapOrder"): EventFragment;
}

export interface CancelDecreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  collateralToken: string;
  collateralDelta: BigNumber;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
}
export type CancelDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ],
  CancelDecreaseOrderEventObject
>;

export type CancelDecreaseOrderEventFilter =
  TypedEventFilter<CancelDecreaseOrderEvent>;

export interface CancelIncreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  purchaseToken: string;
  purchaseTokenAmount: BigNumber;
  collateralToken: string;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
}
export type CancelIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ],
  CancelIncreaseOrderEventObject
>;

export type CancelIncreaseOrderEventFilter =
  TypedEventFilter<CancelIncreaseOrderEvent>;

export interface CancelSwapOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  path: string[];
  amountIn: BigNumber;
  minOut: BigNumber;
  triggerRatio: BigNumber;
  triggerAboveThreshold: boolean;
  shouldUnwrap: boolean;
  executionFee: BigNumber;
}
export type CancelSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ],
  CancelSwapOrderEventObject
>;

export type CancelSwapOrderEventFilter = TypedEventFilter<CancelSwapOrderEvent>;

export interface CreateDecreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  collateralToken: string;
  collateralDelta: BigNumber;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
}
export type CreateDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ],
  CreateDecreaseOrderEventObject
>;

export type CreateDecreaseOrderEventFilter =
  TypedEventFilter<CreateDecreaseOrderEvent>;

export interface CreateIncreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  purchaseToken: string;
  purchaseTokenAmount: BigNumber;
  collateralToken: string;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
}
export type CreateIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ],
  CreateIncreaseOrderEventObject
>;

export type CreateIncreaseOrderEventFilter =
  TypedEventFilter<CreateIncreaseOrderEvent>;

export interface CreateSwapOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  path: string[];
  amountIn: BigNumber;
  minOut: BigNumber;
  triggerRatio: BigNumber;
  triggerAboveThreshold: boolean;
  shouldUnwrap: boolean;
  executionFee: BigNumber;
}
export type CreateSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ],
  CreateSwapOrderEventObject
>;

export type CreateSwapOrderEventFilter = TypedEventFilter<CreateSwapOrderEvent>;

export interface ExecuteDecreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  collateralToken: string;
  collateralDelta: BigNumber;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
  executionPrice: BigNumber;
}
export type ExecuteDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ],
  ExecuteDecreaseOrderEventObject
>;

export type ExecuteDecreaseOrderEventFilter =
  TypedEventFilter<ExecuteDecreaseOrderEvent>;

export interface ExecuteIncreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  purchaseToken: string;
  purchaseTokenAmount: BigNumber;
  collateralToken: string;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
  executionFee: BigNumber;
  executionPrice: BigNumber;
}
export type ExecuteIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ],
  ExecuteIncreaseOrderEventObject
>;

export type ExecuteIncreaseOrderEventFilter =
  TypedEventFilter<ExecuteIncreaseOrderEvent>;

export interface ExecuteSwapOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  path: string[];
  amountIn: BigNumber;
  minOut: BigNumber;
  amountOut: BigNumber;
  triggerRatio: BigNumber;
  triggerAboveThreshold: boolean;
  shouldUnwrap: boolean;
  executionFee: BigNumber;
}
export type ExecuteSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ],
  ExecuteSwapOrderEventObject
>;

export type ExecuteSwapOrderEventFilter =
  TypedEventFilter<ExecuteSwapOrderEvent>;

export interface IncreaseOrderCancelledEventObject {
  account: string;
  orderIndex: BigNumber;
  order: OrderBook.IncreaseOrderStructOutput;
}
export type IncreaseOrderCancelledEvent = TypedEvent<
  [string, BigNumber, OrderBook.IncreaseOrderStructOutput],
  IncreaseOrderCancelledEventObject
>;

export type IncreaseOrderCancelledEventFilter =
  TypedEventFilter<IncreaseOrderCancelledEvent>;

export interface IncreaseOrderCreatedEventObject {
  account: string;
  orderIndex: BigNumber;
  order: OrderBook.IncreaseOrderStructOutput;
}
export type IncreaseOrderCreatedEvent = TypedEvent<
  [string, BigNumber, OrderBook.IncreaseOrderStructOutput],
  IncreaseOrderCreatedEventObject
>;

export type IncreaseOrderCreatedEventFilter =
  TypedEventFilter<IncreaseOrderCreatedEvent>;

export interface IncreaseOrderExecutedEventObject {
  account: string;
  orderIndex: BigNumber;
  executionPrice: BigNumber;
  order: OrderBook.IncreaseOrderStructOutput;
}
export type IncreaseOrderExecutedEvent = TypedEvent<
  [string, BigNumber, BigNumber, OrderBook.IncreaseOrderStructOutput],
  IncreaseOrderExecutedEventObject
>;

export type IncreaseOrderExecutedEventFilter =
  TypedEventFilter<IncreaseOrderExecutedEvent>;

export interface IncreaseOrderUpdatedEventObject {
  account: string;
  orderIndex: BigNumber;
  order: OrderBook.IncreaseOrderStructOutput;
}
export type IncreaseOrderUpdatedEvent = TypedEvent<
  [string, BigNumber, OrderBook.IncreaseOrderStructOutput],
  IncreaseOrderUpdatedEventObject
>;

export type IncreaseOrderUpdatedEventFilter =
  TypedEventFilter<IncreaseOrderUpdatedEvent>;

export interface InitializeEventObject {
  router: string;
  vault: string;
  weth: string;
  usdg: string;
  minExecutionFee: BigNumber;
  minPurchaseTokenAmountUsd: BigNumber;
}
export type InitializeEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpdateDecreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  collateralToken: string;
  collateralDelta: BigNumber;
  indexToken: string;
  sizeDelta: BigNumber;
  isLong: boolean;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
}
export type UpdateDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean
  ],
  UpdateDecreaseOrderEventObject
>;

export type UpdateDecreaseOrderEventFilter =
  TypedEventFilter<UpdateDecreaseOrderEvent>;

export interface UpdateGovEventObject {
  gov: string;
}
export type UpdateGovEvent = TypedEvent<[string], UpdateGovEventObject>;

export type UpdateGovEventFilter = TypedEventFilter<UpdateGovEvent>;

export interface UpdateIncreaseOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  collateralToken: string;
  indexToken: string;
  isLong: boolean;
  sizeDelta: BigNumber;
  triggerPrice: BigNumber;
  triggerAboveThreshold: boolean;
}
export type UpdateIncreaseOrderEvent = TypedEvent<
  [string, BigNumber, string, string, boolean, BigNumber, BigNumber, boolean],
  UpdateIncreaseOrderEventObject
>;

export type UpdateIncreaseOrderEventFilter =
  TypedEventFilter<UpdateIncreaseOrderEvent>;

export interface UpdateMinExecutionFeeEventObject {
  minExecutionFee: BigNumber;
}
export type UpdateMinExecutionFeeEvent = TypedEvent<
  [BigNumber],
  UpdateMinExecutionFeeEventObject
>;

export type UpdateMinExecutionFeeEventFilter =
  TypedEventFilter<UpdateMinExecutionFeeEvent>;

export interface UpdateMinPurchaseTokenAmountUsdEventObject {
  minPurchaseTokenAmountUsd: BigNumber;
}
export type UpdateMinPurchaseTokenAmountUsdEvent = TypedEvent<
  [BigNumber],
  UpdateMinPurchaseTokenAmountUsdEventObject
>;

export type UpdateMinPurchaseTokenAmountUsdEventFilter =
  TypedEventFilter<UpdateMinPurchaseTokenAmountUsdEvent>;

export interface UpdateSwapOrderEventObject {
  account: string;
  orderIndex: BigNumber;
  path: string[];
  amountIn: BigNumber;
  minOut: BigNumber;
  triggerRatio: BigNumber;
  triggerAboveThreshold: boolean;
  shouldUnwrap: boolean;
  executionFee: BigNumber;
}
export type UpdateSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ],
  UpdateSwapOrderEventObject
>;

export type UpdateSwapOrderEventFilter = TypedEventFilter<UpdateSwapOrderEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelMultiple(
      _swapOrderIndexes: PromiseOrValue<BigNumberish>[],
      _increaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      _decreaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreaseOrder(
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreaseOrderForAccount(
      _account: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreaseOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreaseOrderV2(
      params: OrderBook.IncreaseOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSwapOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      _shouldUnwrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    decreaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeDecreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    getUsdgMinPrice(
      _otherToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
        tpSlExecutionFee: BigNumber;
      }
    >;

    increaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initOrderBook(
      _router: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionRouter(overrides?: CallOverrides): Promise<[string]>;

    quoteExecutionFeeAdjustment(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionRouter(
      _positionRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        account: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    swapOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIncreaseOrderV2(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _maximizePrice: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: PromiseOrValue<string>[],
      _triggerRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  cancelDecreaseOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreaseOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelMultiple(
    _swapOrderIndexes: PromiseOrValue<BigNumberish>[],
    _increaseOrderIndexes: PromiseOrValue<BigNumberish>[],
    _decreaseOrderIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSwapOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreaseOrder(
    _indexToken: PromiseOrValue<string>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _collateralToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreaseOrderForAccount(
    _account: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _collateralToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreaseOrder(
    _path: PromiseOrValue<string>[],
    _amountIn: PromiseOrValue<BigNumberish>,
    _indexToken: PromiseOrValue<string>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _collateralToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _shouldWrap: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreaseOrderV2(
    params: OrderBook.IncreaseOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSwapOrder(
    _path: PromiseOrValue<string>[],
    _amountIn: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _triggerRatio: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _shouldWrap: PromiseOrValue<boolean>,
    _shouldUnwrap: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      account: string;
      collateralToken: string;
      collateralDelta: BigNumber;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  decreaseOrdersIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeDecreaseOrder(
    _address: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseOrder(
    _address: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeSwapOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDecreaseOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      collateralToken: string;
      collateralDelta: BigNumber;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  getIncreaseOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      purchaseToken: string;
      purchaseTokenAmount: BigNumber;
      collateralToken: string;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  getSwapOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber
    ] & {
      path0: string;
      path1: string;
      path2: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      triggerRatio: BigNumber;
      triggerAboveThreshold: boolean;
      shouldUnwrap: boolean;
      executionFee: BigNumber;
    }
  >;

  getUsdgMinPrice(
    _otherToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  increaseOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      account: string;
      purchaseToken: string;
      purchaseTokenAmount: BigNumber;
      collateralToken: string;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
      tp: BigNumber;
      sl: BigNumber;
      tpSlExecutionFee: BigNumber;
    }
  >;

  increaseOrdersIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initOrderBook(
    _router: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _usdg: PromiseOrValue<string>,
    _minExecutionFee: PromiseOrValue<BigNumberish>,
    _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

  positionRouter(overrides?: CallOverrides): Promise<string>;

  quoteExecutionFeeAdjustment(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _newTp: PromiseOrValue<BigNumberish>,
    _newSl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinExecutionFee(
    _minExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinPurchaseTokenAmountUsd(
    _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionRouter(
    _positionRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      account: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      triggerRatio: BigNumber;
      triggerAboveThreshold: boolean;
      shouldUnwrap: boolean;
      executionFee: BigNumber;
    }
  >;

  swapOrdersIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateDecreaseOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIncreaseOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIncreaseOrderV2(
    _orderIndex: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    _tp: PromiseOrValue<BigNumberish>,
    _sl: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSwapOrder(
    _orderIndex: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _triggerRatio: PromiseOrValue<BigNumberish>,
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdg(overrides?: CallOverrides): Promise<string>;

  validatePositionOrderPrice(
    _triggerAboveThreshold: PromiseOrValue<boolean>,
    _triggerPrice: PromiseOrValue<BigNumberish>,
    _indexToken: PromiseOrValue<string>,
    _maximizePrice: PromiseOrValue<boolean>,
    _raise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  validateSwapOrderPriceWithTriggerAboveThreshold(
    _path: PromiseOrValue<string>[],
    _triggerRatio: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMultiple(
      _swapOrderIndexes: PromiseOrValue<BigNumberish>[],
      _increaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      _decreaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDecreaseOrder(
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDecreaseOrderForAccount(
      _account: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createIncreaseOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createIncreaseOrderV2(
      params: OrderBook.IncreaseOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSwapOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      _shouldUnwrap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    decreaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeDecreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    getUsdgMinPrice(
      _otherToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    increaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
        tpSlExecutionFee: BigNumber;
      }
    >;

    increaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initOrderBook(
      _router: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<string>;

    quoteExecutionFeeAdjustment(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionRouter(
      _positionRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        account: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    swapOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIncreaseOrderV2(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdg(overrides?: CallOverrides): Promise<string>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _maximizePrice: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: PromiseOrValue<string>[],
      _triggerRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CancelDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CancelDecreaseOrderEventFilter;
    CancelDecreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CancelDecreaseOrderEventFilter;

    "CancelIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CancelIncreaseOrderEventFilter;
    CancelIncreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CancelIncreaseOrderEventFilter;

    "CancelSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): CancelSwapOrderEventFilter;
    CancelSwapOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): CancelSwapOrderEventFilter;

    "CreateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CreateDecreaseOrderEventFilter;
    CreateDecreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CreateDecreaseOrderEventFilter;

    "CreateIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CreateIncreaseOrderEventFilter;
    CreateIncreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): CreateIncreaseOrderEventFilter;

    "CreateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): CreateSwapOrderEventFilter;
    CreateSwapOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): CreateSwapOrderEventFilter;

    "ExecuteDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): ExecuteDecreaseOrderEventFilter;
    ExecuteDecreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): ExecuteDecreaseOrderEventFilter;

    "ExecuteIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): ExecuteIncreaseOrderEventFilter;
    ExecuteIncreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): ExecuteIncreaseOrderEventFilter;

    "ExecuteSwapOrder(address,uint256,address[],uint256,uint256,uint256,uint256,bool,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      amountOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): ExecuteSwapOrderEventFilter;
    ExecuteSwapOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      amountOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): ExecuteSwapOrderEventFilter;

    "IncreaseOrderCancelled(address,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderCancelledEventFilter;
    IncreaseOrderCancelled(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderCancelledEventFilter;

    "IncreaseOrderCreated(address,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderCreatedEventFilter;
    IncreaseOrderCreated(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderCreatedEventFilter;

    "IncreaseOrderExecuted(address,uint256,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      executionPrice?: null,
      order?: null
    ): IncreaseOrderExecutedEventFilter;
    IncreaseOrderExecuted(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      executionPrice?: null,
      order?: null
    ): IncreaseOrderExecutedEventFilter;

    "IncreaseOrderUpdated(address,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderUpdatedEventFilter;
    IncreaseOrderUpdated(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      order?: null
    ): IncreaseOrderUpdatedEventFilter;

    "Initialize(address,address,address,address,uint256,uint256)"(
      router?: null,
      vault?: null,
      weth?: null,
      usdg?: null,
      minExecutionFee?: null,
      minPurchaseTokenAmountUsd?: null
    ): InitializeEventFilter;
    Initialize(
      router?: null,
      vault?: null,
      weth?: null,
      usdg?: null,
      minExecutionFee?: null,
      minPurchaseTokenAmountUsd?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "UpdateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): UpdateDecreaseOrderEventFilter;
    UpdateDecreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): UpdateDecreaseOrderEventFilter;

    "UpdateGov(address)"(gov?: null): UpdateGovEventFilter;
    UpdateGov(gov?: null): UpdateGovEventFilter;

    "UpdateIncreaseOrder(address,uint256,address,address,bool,uint256,uint256,bool)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      sizeDelta?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): UpdateIncreaseOrderEventFilter;
    UpdateIncreaseOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      sizeDelta?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): UpdateIncreaseOrderEventFilter;

    "UpdateMinExecutionFee(uint256)"(
      minExecutionFee?: null
    ): UpdateMinExecutionFeeEventFilter;
    UpdateMinExecutionFee(
      minExecutionFee?: null
    ): UpdateMinExecutionFeeEventFilter;

    "UpdateMinPurchaseTokenAmountUsd(uint256)"(
      minPurchaseTokenAmountUsd?: null
    ): UpdateMinPurchaseTokenAmountUsdEventFilter;
    UpdateMinPurchaseTokenAmountUsd(
      minPurchaseTokenAmountUsd?: null
    ): UpdateMinPurchaseTokenAmountUsdEventFilter;

    "UpdateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): UpdateSwapOrderEventFilter;
    UpdateSwapOrder(
      account?: PromiseOrValue<string> | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): UpdateSwapOrderEventFilter;
  };

  estimateGas: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelMultiple(
      _swapOrderIndexes: PromiseOrValue<BigNumberish>[],
      _increaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      _decreaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreaseOrder(
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreaseOrderForAccount(
      _account: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreaseOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreaseOrderV2(
      params: OrderBook.IncreaseOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSwapOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      _shouldUnwrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeDecreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdgMinPrice(
      _otherToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initOrderBook(
      _router: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<BigNumber>;

    quoteExecutionFeeAdjustment(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionRouter(
      _positionRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIncreaseOrderV2(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _maximizePrice: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: PromiseOrValue<string>[],
      _triggerRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelMultiple(
      _swapOrderIndexes: PromiseOrValue<BigNumberish>[],
      _increaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      _decreaseOrderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreaseOrder(
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreaseOrderForAccount(
      _account: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreaseOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _collateralToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreaseOrderV2(
      params: OrderBook.IncreaseOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSwapOrder(
      _path: PromiseOrValue<string>[],
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _shouldWrap: PromiseOrValue<boolean>,
      _shouldUnwrap: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeDecreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseOrder(
      _address: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdgMinPrice(
      _otherToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initOrderBook(
      _router: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPurchaseTokenAmountUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteExecutionFeeAdjustment(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionRouter(
      _positionRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrdersIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDecreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIncreaseOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIncreaseOrderV2(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapOrder(
      _orderIndex: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _triggerRatio: PromiseOrValue<BigNumberish>,
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: PromiseOrValue<boolean>,
      _triggerPrice: PromiseOrValue<BigNumberish>,
      _indexToken: PromiseOrValue<string>,
      _maximizePrice: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: PromiseOrValue<string>[],
      _triggerRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
