/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PositionRouter {
  export type IncreasePositionRequestStruct = {
    account: PromiseOrValue<string>;
    path: PromiseOrValue<string>[];
    indexToken: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    blockTime: PromiseOrValue<BigNumberish>;
    hasCollateralInETH: PromiseOrValue<boolean>;
    callbackTarget: PromiseOrValue<string>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
    brokerAddress: PromiseOrValue<string>;
    brokerFeeBasisPoints: PromiseOrValue<BigNumberish>;
    tpSlExecutionFee: PromiseOrValue<BigNumberish>;
  };

  export type IncreasePositionRequestStructOutput = [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: BigNumber;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    blockNumber: BigNumber;
    blockTime: BigNumber;
    hasCollateralInETH: boolean;
    callbackTarget: string;
    tp: BigNumber;
    sl: BigNumber;
    brokerAddress: string;
    brokerFeeBasisPoints: BigNumber;
    tpSlExecutionFee: BigNumber;
  };

  export type DecreasePositionParamsStruct = {
    path: PromiseOrValue<string>[];
    indexToken: PromiseOrValue<string>;
    collateralDelta: PromiseOrValue<BigNumberish>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    receiver: PromiseOrValue<string>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    withdrawETH: PromiseOrValue<boolean>;
    callbackTarget: PromiseOrValue<string>;
    priceData: PromiseOrValue<BytesLike>[];
  };

  export type DecreasePositionParamsStructOutput = [
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string[]
  ] & {
    path: string[];
    indexToken: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    receiver: string;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    withdrawETH: boolean;
    callbackTarget: string;
    priceData: string[];
  };

  export type IncreasePositionParamsStruct = {
    path: PromiseOrValue<string>[];
    indexToken: PromiseOrValue<string>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
    callbackTarget: PromiseOrValue<string>;
    priceData: PromiseOrValue<BytesLike>[];
  };

  export type IncreasePositionParamsStructOutput = [
    string[],
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string[]
  ] & {
    path: string[];
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    referralCode: string;
    callbackTarget: string;
    priceData: string[];
  };

  export type IncreasePositionParamsV2Struct = {
    amountIn: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
    brokerFeeBasisPoints: PromiseOrValue<BigNumberish>;
    indexToken: PromiseOrValue<string>;
    brokerAddress: PromiseOrValue<string>;
    isLong: PromiseOrValue<boolean>;
    hasCollateralInETH: PromiseOrValue<boolean>;
    path: PromiseOrValue<string>[];
    priceData: PromiseOrValue<BytesLike>[];
  };

  export type IncreasePositionParamsV2StructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean,
    string[],
    string[]
  ] & {
    amountIn: BigNumber;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    referralCode: string;
    tp: BigNumber;
    sl: BigNumber;
    brokerFeeBasisPoints: BigNumber;
    indexToken: string;
    brokerAddress: string;
    isLong: boolean;
    hasCollateralInETH: boolean;
    path: string[];
    priceData: string[];
  };

  export type DecreasePositionRequestStruct = {
    account: PromiseOrValue<string>;
    path: PromiseOrValue<string>[];
    indexToken: PromiseOrValue<string>;
    collateralDelta: PromiseOrValue<BigNumberish>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    receiver: PromiseOrValue<string>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    blockTime: PromiseOrValue<BigNumberish>;
    withdrawETH: PromiseOrValue<boolean>;
    callbackTarget: PromiseOrValue<string>;
  };

  export type DecreasePositionRequestStructOutput = [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    receiver: string;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    blockNumber: BigNumber;
    blockTime: BigNumber;
    withdrawETH: boolean;
    callbackTarget: string;
  };
}

export interface PositionRouterInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "cancelDecreasePosition(bytes32,address)": FunctionFragment;
    "cancelIncreasePosition(bytes32,address)": FunctionFragment;
    "circuitBreaker()": FunctionFragment;
    "createDecreasePosition((address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,bool,address,bytes[]))": FunctionFragment;
    "createIncreasePosition((address[],address,uint256,bool,uint256,uint256,uint256,bytes32,address,bytes[]),uint256)": FunctionFragment;
    "createIncreasePositionETH((address[],address,uint256,bool,uint256,uint256,uint256,bytes32,address,bytes[]))": FunctionFragment;
    "createIncreasePositionV2((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,uint256,uint256,address,address,bool,bool,address[],bytes[]))": FunctionFragment;
    "decreasePositionRequestKeys(uint256)": FunctionFragment;
    "decreasePositionRequestKeysStart()": FunctionFragment;
    "decreasePositionsIndex(address)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "ethTransferGasLimit()": FunctionFragment;
    "executeDecreasePosition(bytes32,address)": FunctionFragment;
    "executeDecreasePositions(uint256,address)": FunctionFragment;
    "executeIncreasePosition(bytes32,address)": FunctionFragment;
    "executeIncreasePositions(uint256,address)": FunctionFragment;
    "feeAdmin()": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "getDecreasePositionRequest(bytes32)": FunctionFragment;
    "getDecreasePositionRequestPath(bytes32)": FunctionFragment;
    "getIncreasePositionRequest(bytes32)": FunctionFragment;
    "getIncreasePositionRequestPath(bytes32)": FunctionFragment;
    "getRequestKey(address,uint256)": FunctionFragment;
    "getRequestQueueLengths()": FunctionFragment;
    "gov()": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "increasePositionRequestKeys(uint256)": FunctionFragment;
    "increasePositionRequestKeysStart()": FunctionFragment;
    "increasePositionsIndex(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isLeverageEnabled()": FunctionFragment;
    "isPositionKeeper(address)": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "maxTimeDelay()": FunctionFragment;
    "minBlockDelayKeeper()": FunctionFragment;
    "minExecutionFee()": FunctionFragment;
    "minTimeDelayPublic()": FunctionFragment;
    "orderBook()": FunctionFragment;
    "pythOracle()": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setConfigParams(uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setDependentContracts(address,address,address,address,address,address,address)": FunctionFragment;
    "setFeeAdmin(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setMinExecutionFee(uint256)": FunctionFragment;
    "setPositionKeeper(address,bool)": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "cancelDecreasePosition"
      | "cancelIncreasePosition"
      | "circuitBreaker"
      | "createDecreasePosition"
      | "createIncreasePosition"
      | "createIncreasePositionETH"
      | "createIncreasePositionV2"
      | "decreasePositionRequestKeys"
      | "decreasePositionRequestKeysStart"
      | "decreasePositionsIndex"
      | "depositFee"
      | "ethTransferGasLimit"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "feeAdmin"
      | "feeReserves"
      | "getDecreasePositionRequest"
      | "getDecreasePositionRequestPath"
      | "getIncreasePositionRequest"
      | "getIncreasePositionRequestPath"
      | "getRequestKey"
      | "getRequestQueueLengths"
      | "gov"
      | "increasePositionBufferBps"
      | "increasePositionRequestKeys"
      | "increasePositionRequestKeysStart"
      | "increasePositionsIndex"
      | "initialize"
      | "isLeverageEnabled"
      | "isPositionKeeper"
      | "maxGlobalLongSizes"
      | "maxGlobalShortSizes"
      | "maxTimeDelay"
      | "minBlockDelayKeeper"
      | "minExecutionFee"
      | "minTimeDelayPublic"
      | "orderBook"
      | "pythOracle"
      | "referralStorage"
      | "router"
      | "setAdmin"
      | "setConfigParams"
      | "setDependentContracts"
      | "setFeeAdmin"
      | "setGov"
      | "setMaxGlobalSizes"
      | "setMinExecutionFee"
      | "setPositionKeeper"
      | "vault"
      | "weth"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "circuitBreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [PositionRouter.DecreasePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      PositionRouter.IncreasePositionParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionETH",
    values: [PositionRouter.IncreasePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionV2",
    values: [PositionRouter.IncreasePositionParamsV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreasePositionRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreasePositionRequestPath",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreasePositionRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreasePositionRequestPath",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orderBook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pythOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigParams",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependentContracts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionKeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreasePositionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreasePositionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pythOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConfigParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependentContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256)": EventFragment;
    "CancelIncreasePosition(address,address[],address,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "IncreasePositionRequestCancelled(address,uint256,uint256,tuple)": EventFragment;
    "IncreasePositionRequestCreated(address,uint256,uint256,tuple)": EventFragment;
    "IncreasePositionRequestExecuted(address,uint256,uint256,uint256,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetConfigParams(uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "SetFeeAdmin(address)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetPositionKeeper(address,bool)": EventFragment;
    "UpdateGov(address)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteIncreasePosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreasePositionRequestCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreasePositionRequestCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreasePositionRequestExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConfigParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPositionKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface CancelDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type CancelDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CancelDecreasePositionEventObject
>;

export type CancelDecreasePositionEventFilter =
  TypedEventFilter<CancelDecreasePositionEvent>;

export interface CancelIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type CancelIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CancelIncreasePositionEventObject
>;

export type CancelIncreasePositionEventFilter =
  TypedEventFilter<CancelIncreasePositionEvent>;

export interface CreateDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  minOut: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
  queueIndex: BigNumber;
}
export type CreateDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CreateDecreasePositionEventObject
>;

export type CreateDecreasePositionEventFilter =
  TypedEventFilter<CreateDecreasePositionEvent>;

export interface CreateIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  minOut: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
  queueIndex: BigNumber;
}
export type CreateIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CreateIncreasePositionEventObject
>;

export type CreateIncreasePositionEventFilter =
  TypedEventFilter<CreateIncreasePositionEvent>;

export interface ExecuteDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  executionPrice: BigNumber;
  amountOut: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type ExecuteDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ExecuteDecreasePositionEventObject
>;

export type ExecuteDecreasePositionEventFilter =
  TypedEventFilter<ExecuteDecreasePositionEvent>;

export interface ExecuteIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  executionPrice: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type ExecuteIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ExecuteIncreasePositionEventObject
>;

export type ExecuteIncreasePositionEventFilter =
  TypedEventFilter<ExecuteIncreasePositionEvent>;

export interface IncreasePositionRequestCancelledEventObject {
  account: string;
  blockGap: BigNumber;
  timeGap: BigNumber;
  request: PositionRouter.IncreasePositionRequestStructOutput;
}
export type IncreasePositionRequestCancelledEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    PositionRouter.IncreasePositionRequestStructOutput
  ],
  IncreasePositionRequestCancelledEventObject
>;

export type IncreasePositionRequestCancelledEventFilter =
  TypedEventFilter<IncreasePositionRequestCancelledEvent>;

export interface IncreasePositionRequestCreatedEventObject {
  account: string;
  index: BigNumber;
  queueIndex: BigNumber;
  request: PositionRouter.IncreasePositionRequestStructOutput;
}
export type IncreasePositionRequestCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    PositionRouter.IncreasePositionRequestStructOutput
  ],
  IncreasePositionRequestCreatedEventObject
>;

export type IncreasePositionRequestCreatedEventFilter =
  TypedEventFilter<IncreasePositionRequestCreatedEvent>;

export interface IncreasePositionRequestExecutedEventObject {
  account: string;
  blockGap: BigNumber;
  timeGap: BigNumber;
  executionPrice: BigNumber;
  request: PositionRouter.IncreasePositionRequestStructOutput;
}
export type IncreasePositionRequestExecutedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PositionRouter.IncreasePositionRequestStructOutput
  ],
  IncreasePositionRequestExecutedEventObject
>;

export type IncreasePositionRequestExecutedEventFilter =
  TypedEventFilter<IncreasePositionRequestExecutedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetConfigParamsEventObject {
  minBlockDelayKeeper: BigNumber;
  minTimeDelayPublic: BigNumber;
  maxTimeDelay: BigNumber;
  ethTransferGasLimit: BigNumber;
  depositFee: BigNumber;
  increasePositionBufferBps: BigNumber;
  isLeverageEnabled: boolean;
}
export type SetConfigParamsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  SetConfigParamsEventObject
>;

export type SetConfigParamsEventFilter = TypedEventFilter<SetConfigParamsEvent>;

export interface SetFeeAdminEventObject {
  feeAdmin: string;
}
export type SetFeeAdminEvent = TypedEvent<[string], SetFeeAdminEventObject>;

export type SetFeeAdminEventFilter = TypedEventFilter<SetFeeAdminEvent>;

export interface SetMaxGlobalSizesEventObject {
  tokens: string[];
  longSizes: BigNumber[];
  shortSizes: BigNumber[];
}
export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]],
  SetMaxGlobalSizesEventObject
>;

export type SetMaxGlobalSizesEventFilter =
  TypedEventFilter<SetMaxGlobalSizesEvent>;

export interface SetPositionKeeperEventObject {
  account: string;
  isActive: boolean;
}
export type SetPositionKeeperEvent = TypedEvent<
  [string, boolean],
  SetPositionKeeperEventObject
>;

export type SetPositionKeeperEventFilter =
  TypedEventFilter<SetPositionKeeperEvent>;

export interface UpdateGovEventObject {
  gov: string;
}
export type UpdateGovEvent = TypedEvent<[string], UpdateGovEventObject>;

export type UpdateGovEventFilter = TypedEventFilter<UpdateGovEvent>;

export interface WithdrawFeesEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface PositionRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    circuitBreaker(overrides?: CallOverrides): Promise<[string]>;

    createDecreasePosition(
      _params: PositionRouter.DecreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePosition(
      _params: PositionRouter.IncreasePositionParamsStruct,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePositionETH(
      _params: PositionRouter.IncreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePositionV2(
      _params: PositionRouter.IncreasePositionParamsV2Struct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeAdmin(overrides?: CallOverrides): Promise<[string]>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDecreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PositionRouter.DecreasePositionRequestStructOutput]>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIncreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PositionRouter.IncreasePositionRequestStructOutput]>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTimeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<[BigNumber]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderBook(overrides?: CallOverrides): Promise<[string]>;

    pythOracle(overrides?: CallOverrides): Promise<[string]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigParams(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      _depositFee: PromiseOrValue<BigNumberish>,
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDependentContracts(
      _orderBook: PromiseOrValue<string>,
      _pythOracle: PromiseOrValue<string>,
      _circuitBreaker: PromiseOrValue<string>,
      _referralManager: PromiseOrValue<string>,
      _valut: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeAdmin(
      _feeAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  cancelDecreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  circuitBreaker(overrides?: CallOverrides): Promise<string>;

  createDecreasePosition(
    _params: PositionRouter.DecreasePositionParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePosition(
    _params: PositionRouter.IncreasePositionParamsStruct,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePositionETH(
    _params: PositionRouter.IncreasePositionParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePositionV2(
    _params: PositionRouter.IncreasePositionParamsV2Struct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePositionRequestKeys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  decreasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePositionsIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  executeDecreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreasePositions(
    _endIndex: PromiseOrValue<BigNumberish>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePositions(
    _endIndex: PromiseOrValue<BigNumberish>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeAdmin(overrides?: CallOverrides): Promise<string>;

  feeReserves(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDecreasePositionRequest(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PositionRouter.DecreasePositionRequestStructOutput>;

  getDecreasePositionRequestPath(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIncreasePositionRequest(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PositionRouter.IncreasePositionRequestStructOutput>;

  getIncreasePositionRequestPath(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRequestKey(
    _account: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestQueueLengths(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  gov(overrides?: CallOverrides): Promise<string>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  increasePositionRequestKeys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  increasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increasePositionsIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isPositionKeeper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxGlobalLongSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

  orderBook(overrides?: CallOverrides): Promise<string>;

  pythOracle(overrides?: CallOverrides): Promise<string>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigParams(
    _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
    _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
    _maxTimeDelay: PromiseOrValue<BigNumberish>,
    _depositFee: PromiseOrValue<BigNumberish>,
    _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
    _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
    _isLeverageEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDependentContracts(
    _orderBook: PromiseOrValue<string>,
    _pythOracle: PromiseOrValue<string>,
    _circuitBreaker: PromiseOrValue<string>,
    _referralManager: PromiseOrValue<string>,
    _valut: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeAdmin(
    _feeAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: PromiseOrValue<string>[],
    _longSizes: PromiseOrValue<BigNumberish>[],
    _shortSizes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinExecutionFee(
    _minExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionKeeper(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    circuitBreaker(overrides?: CallOverrides): Promise<string>;

    createDecreasePosition(
      _params: PositionRouter.DecreasePositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePosition(
      _params: PositionRouter.IncreasePositionParamsStruct,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePositionETH(
      _params: PositionRouter.IncreasePositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePositionV2(
      _params: PositionRouter.IncreasePositionParamsV2Struct,
      overrides?: CallOverrides
    ): Promise<string>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAdmin(overrides?: CallOverrides): Promise<string>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PositionRouter.DecreasePositionRequestStructOutput>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIncreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PositionRouter.IncreasePositionRequestStructOutput>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<string>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<string>;

    pythOracle(overrides?: CallOverrides): Promise<string>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfigParams(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      _depositFee: PromiseOrValue<BigNumberish>,
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDependentContracts(
      _orderBook: PromiseOrValue<string>,
      _pythOracle: PromiseOrValue<string>,
      _circuitBreaker: PromiseOrValue<string>,
      _referralManager: PromiseOrValue<string>,
      _valut: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAdmin(
      _feeAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelDecreasePositionEventFilter;
    CancelDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelDecreasePositionEventFilter;

    "CancelIncreasePosition(address,address[],address,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelIncreasePositionEventFilter;
    CancelIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelIncreasePositionEventFilter;

    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null
    ): CreateDecreasePositionEventFilter;
    CreateDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null
    ): CreateDecreasePositionEventFilter;

    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null
    ): CreateIncreasePositionEventFilter;
    CreateIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null
    ): CreateIncreasePositionEventFilter;

    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      executionFee?: null,
      executionPrice?: null,
      amountOut?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteDecreasePositionEventFilter;
    ExecuteDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      executionFee?: null,
      executionPrice?: null,
      amountOut?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteDecreasePositionEventFilter;

    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      executionPrice?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteIncreasePositionEventFilter;
    ExecuteIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      executionPrice?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteIncreasePositionEventFilter;

    "IncreasePositionRequestCancelled(address,uint256,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      blockGap?: null,
      timeGap?: null,
      request?: null
    ): IncreasePositionRequestCancelledEventFilter;
    IncreasePositionRequestCancelled(
      account?: PromiseOrValue<string> | null,
      blockGap?: null,
      timeGap?: null,
      request?: null
    ): IncreasePositionRequestCancelledEventFilter;

    "IncreasePositionRequestCreated(address,uint256,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      index?: null,
      queueIndex?: null,
      request?: null
    ): IncreasePositionRequestCreatedEventFilter;
    IncreasePositionRequestCreated(
      account?: PromiseOrValue<string> | null,
      index?: null,
      queueIndex?: null,
      request?: null
    ): IncreasePositionRequestCreatedEventFilter;

    "IncreasePositionRequestExecuted(address,uint256,uint256,uint256,tuple)"(
      account?: PromiseOrValue<string> | null,
      blockGap?: null,
      timeGap?: null,
      executionPrice?: null,
      request?: null
    ): IncreasePositionRequestExecutedEventFilter;
    IncreasePositionRequestExecuted(
      account?: PromiseOrValue<string> | null,
      blockGap?: null,
      timeGap?: null,
      executionPrice?: null,
      request?: null
    ): IncreasePositionRequestExecutedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetConfigParams(uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null,
      ethTransferGasLimit?: null,
      depositFee?: null,
      increasePositionBufferBps?: null,
      isLeverageEnabled?: null
    ): SetConfigParamsEventFilter;
    SetConfigParams(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null,
      ethTransferGasLimit?: null,
      depositFee?: null,
      increasePositionBufferBps?: null,
      isLeverageEnabled?: null
    ): SetConfigParamsEventFilter;

    "SetFeeAdmin(address)"(feeAdmin?: null): SetFeeAdminEventFilter;
    SetFeeAdmin(feeAdmin?: null): SetFeeAdminEventFilter;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;
    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;

    "SetPositionKeeper(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetPositionKeeperEventFilter;
    SetPositionKeeper(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetPositionKeeperEventFilter;

    "UpdateGov(address)"(gov?: null): UpdateGovEventFilter;
    UpdateGov(gov?: null): UpdateGovEventFilter;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    circuitBreaker(overrides?: CallOverrides): Promise<BigNumber>;

    createDecreasePosition(
      _params: PositionRouter.DecreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePosition(
      _params: PositionRouter.IncreasePositionParamsStruct,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePositionETH(
      _params: PositionRouter.IncreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePositionV2(
      _params: PositionRouter.IncreasePositionParamsV2Struct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQueueLengths(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<BigNumber>;

    pythOracle(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigParams(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      _depositFee: PromiseOrValue<BigNumberish>,
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDependentContracts(
      _orderBook: PromiseOrValue<string>,
      _pythOracle: PromiseOrValue<string>,
      _circuitBreaker: PromiseOrValue<string>,
      _referralManager: PromiseOrValue<string>,
      _valut: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeAdmin(
      _feeAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    circuitBreaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDecreasePosition(
      _params: PositionRouter.DecreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePosition(
      _params: PositionRouter.IncreasePositionParamsStruct,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePositionETH(
      _params: PositionRouter.IncreasePositionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePositionV2(
      _params: PositionRouter.IncreasePositionParamsV2Struct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethTransferGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreasePositionRequest(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockDelayKeeper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeDelayPublic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pythOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigParams(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      _depositFee: PromiseOrValue<BigNumberish>,
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDependentContracts(
      _orderBook: PromiseOrValue<string>,
      _pythOracle: PromiseOrValue<string>,
      _circuitBreaker: PromiseOrValue<string>,
      _referralManager: PromiseOrValue<string>,
      _valut: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAdmin(
      _feeAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
