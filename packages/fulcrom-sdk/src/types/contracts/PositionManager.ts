/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
 
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PositionManagerInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "decreasePosition(address,address,uint256,uint256,bool,address,uint256)": FunctionFragment;
    "decreasePositionAndSwap(address[],address,uint256,uint256,bool,address,uint256,uint256)": FunctionFragment;
    "decreasePositionAndSwapETH(address[],address,uint256,uint256,bool,address,uint256,uint256)": FunctionFragment;
    "decreasePositionETH(address,address,uint256,uint256,bool,address,uint256)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "executeDecreaseOrder(address,uint256,address)": FunctionFragment;
    "executeIncreaseOrder(address,uint256,address)": FunctionFragment;
    "executeSwapOrder(address,uint256,address)": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "inLegacyMode()": FunctionFragment;
    "increasePosition(address[],address,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "increasePositionETH(address[],address,uint256,uint256,bool,uint256)": FunctionFragment;
    "isLiquidator(address)": FunctionFragment;
    "isOrderKeeper(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "liquidatePosition(address,address,address,bool,address)": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "orderBook()": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setInLegacyMode(bool)": FunctionFragment;
    "setIncreasePositionBufferBps(uint256)": FunctionFragment;
    "setLiquidator(address,bool)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setOrderKeeper(address,bool)": FunctionFragment;
    "setPartner(address,bool)": FunctionFragment;
    "setReferralStorage(address)": FunctionFragment;
    "setShouldValidateIncreaseOrder(bool)": FunctionFragment;
    "shouldValidateIncreaseOrder()": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "admin"
      | "approve"
      | "decreasePosition"
      | "decreasePositionAndSwap"
      | "decreasePositionAndSwapETH"
      | "decreasePositionETH"
      | "depositFee"
      | "executeDecreaseOrder"
      | "executeIncreaseOrder"
      | "executeSwapOrder"
      | "feeReserves"
      | "gov"
      | "inLegacyMode"
      | "increasePosition"
      | "increasePositionBufferBps"
      | "increasePositionETH"
      | "isLiquidator"
      | "isOrderKeeper"
      | "isPartner"
      | "liquidatePosition"
      | "maxGlobalLongSizes"
      | "maxGlobalShortSizes"
      | "orderBook"
      | "referralStorage"
      | "router"
      | "sendValue"
      | "setAdmin"
      | "setDepositFee"
      | "setGov"
      | "setInLegacyMode"
      | "setIncreasePositionBufferBps"
      | "setLiquidator"
      | "setMaxGlobalSizes"
      | "setOrderKeeper"
      | "setPartner"
      | "setReferralStorage"
      | "setShouldValidateIncreaseOrder"
      | "shouldValidateIncreaseOrder"
      | "vault"
      | "weth"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionAndSwap",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionAndSwapETH",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inLegacyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionETH",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "orderBook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInLegacyMode",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderKeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldValidateIncreaseOrder",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldValidateIncreaseOrder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionAndSwapETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inLegacyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrderKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInLegacyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldValidateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldValidateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetDepositFee(uint256)": EventFragment;
    "SetInLegacyMode(bool)": EventFragment;
    "SetIncreasePositionBufferBps(uint256)": EventFragment;
    "SetLiquidator(address,bool)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetOrderKeeper(address,bool)": EventFragment;
    "SetPartner(address,bool)": EventFragment;
    "SetReferralStorage(address)": EventFragment;
    "SetShouldValidateIncreaseOrder(bool)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInLegacyMode"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIncreasePositionBufferBps"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOrderKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPartner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralStorage"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetShouldValidateIncreaseOrder"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface DecreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type DecreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  DecreasePositionReferralEventObject
>;

export type DecreasePositionReferralEventFilter =
  TypedEventFilter<DecreasePositionReferralEvent>;

export interface IncreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type IncreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  IncreasePositionReferralEventObject
>;

export type IncreasePositionReferralEventFilter =
  TypedEventFilter<IncreasePositionReferralEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetDepositFeeEventObject {
  depositFee: BigNumber;
}
export type SetDepositFeeEvent = TypedEvent<
  [BigNumber],
  SetDepositFeeEventObject
>;

export type SetDepositFeeEventFilter = TypedEventFilter<SetDepositFeeEvent>;

export interface SetInLegacyModeEventObject {
  inLegacyMode: boolean;
}
export type SetInLegacyModeEvent = TypedEvent<
  [boolean],
  SetInLegacyModeEventObject
>;

export type SetInLegacyModeEventFilter = TypedEventFilter<SetInLegacyModeEvent>;

export interface SetIncreasePositionBufferBpsEventObject {
  increasePositionBufferBps: BigNumber;
}
export type SetIncreasePositionBufferBpsEvent = TypedEvent<
  [BigNumber],
  SetIncreasePositionBufferBpsEventObject
>;

export type SetIncreasePositionBufferBpsEventFilter =
  TypedEventFilter<SetIncreasePositionBufferBpsEvent>;

export interface SetLiquidatorEventObject {
  account: string;
  isActive: boolean;
}
export type SetLiquidatorEvent = TypedEvent<
  [string, boolean],
  SetLiquidatorEventObject
>;

export type SetLiquidatorEventFilter = TypedEventFilter<SetLiquidatorEvent>;

export interface SetMaxGlobalSizesEventObject {
  tokens: string[];
  longSizes: BigNumber[];
  shortSizes: BigNumber[];
}
export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]],
  SetMaxGlobalSizesEventObject
>;

export type SetMaxGlobalSizesEventFilter =
  TypedEventFilter<SetMaxGlobalSizesEvent>;

export interface SetOrderKeeperEventObject {
  account: string;
  isActive: boolean;
}
export type SetOrderKeeperEvent = TypedEvent<
  [string, boolean],
  SetOrderKeeperEventObject
>;

export type SetOrderKeeperEventFilter = TypedEventFilter<SetOrderKeeperEvent>;

export interface SetPartnerEventObject {
  account: string;
  isActive: boolean;
}
export type SetPartnerEvent = TypedEvent<
  [string, boolean],
  SetPartnerEventObject
>;

export type SetPartnerEventFilter = TypedEventFilter<SetPartnerEvent>;

export interface SetReferralStorageEventObject {
  referralStorage: string;
}
export type SetReferralStorageEvent = TypedEvent<
  [string],
  SetReferralStorageEventObject
>;

export type SetReferralStorageEventFilter =
  TypedEventFilter<SetReferralStorageEvent>;

export interface SetShouldValidateIncreaseOrderEventObject {
  shouldValidateIncreaseOrder: boolean;
}
export type SetShouldValidateIncreaseOrderEvent = TypedEvent<
  [boolean],
  SetShouldValidateIncreaseOrderEventObject
>;

export type SetShouldValidateIncreaseOrderEventFilter =
  TypedEventFilter<SetShouldValidateIncreaseOrderEvent>;

export interface WithdrawFeesEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface PositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePosition(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePositionAndSwap(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePositionAndSwapETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePositionETH(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    inLegacyMode(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    increasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLiquidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOrderKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderBook(overrides?: CallOverrides): Promise<[string]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInLegacyMode(
      _inLegacyMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrderKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePosition(
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePositionAndSwap(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePositionAndSwapETH(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePositionETH(
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  executeDecreaseOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeSwapOrder(
    _account: PromiseOrValue<string>,
    _orderIndex: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeReserves(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  inLegacyMode(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  increasePositionETH(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLiquidator(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOrderKeeper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidatePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxGlobalLongSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderBook(overrides?: CallOverrides): Promise<string>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sendValue(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInLegacyMode(
    _inLegacyMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIncreasePositionBufferBps(
    _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: PromiseOrValue<string>[],
    _longSizes: PromiseOrValue<BigNumberish>[],
    _shortSizes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrderKeeper(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartner(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralStorage(
    _referralStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShouldValidateIncreaseOrder(
    _shouldValidateIncreaseOrder: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePosition(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionAndSwap(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionAndSwapETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionETH(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    inLegacyMode(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isLiquidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOrderKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<string>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInLegacyMode(
      _inLegacyMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;
    DecreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;
    IncreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetDepositFee(uint256)"(depositFee?: null): SetDepositFeeEventFilter;
    SetDepositFee(depositFee?: null): SetDepositFeeEventFilter;

    "SetInLegacyMode(bool)"(inLegacyMode?: null): SetInLegacyModeEventFilter;
    SetInLegacyMode(inLegacyMode?: null): SetInLegacyModeEventFilter;

    "SetIncreasePositionBufferBps(uint256)"(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;
    SetIncreasePositionBufferBps(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;

    "SetLiquidator(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetLiquidatorEventFilter;
    SetLiquidator(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetLiquidatorEventFilter;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;
    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;

    "SetOrderKeeper(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetOrderKeeperEventFilter;
    SetOrderKeeper(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetOrderKeeperEventFilter;

    "SetPartner(address,bool)"(
      account?: null,
      isActive?: null
    ): SetPartnerEventFilter;
    SetPartner(account?: null, isActive?: null): SetPartnerEventFilter;

    "SetReferralStorage(address)"(
      referralStorage?: null
    ): SetReferralStorageEventFilter;
    SetReferralStorage(referralStorage?: null): SetReferralStorageEventFilter;

    "SetShouldValidateIncreaseOrder(bool)"(
      shouldValidateIncreaseOrder?: null
    ): SetShouldValidateIncreaseOrderEventFilter;
    SetShouldValidateIncreaseOrder(
      shouldValidateIncreaseOrder?: null
    ): SetShouldValidateIncreaseOrderEventFilter;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePosition(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePositionAndSwap(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePositionAndSwapETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePositionETH(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    inLegacyMode(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLiquidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOrderKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInLegacyMode(
      _inLegacyMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrderKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionAndSwap(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionAndSwapETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionETH(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeDecreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeSwapOrder(
      _account: PromiseOrValue<string>,
      _orderIndex: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inLegacyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLiquidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOrderKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInLegacyMode(
      _inLegacyMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrderKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldValidateIncreaseOrder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
