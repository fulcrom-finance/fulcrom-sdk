/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
 
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RewardRouterInterface extends utils.Interface {
  functions: {
    "acceptTransfer(address)": FunctionFragment;
    "batchCompoundForAccounts(address[])": FunctionFragment;
    "batchStakeFulForAccount(address[],uint256[])": FunctionFragment;
    "bnFul()": FunctionFragment;
    "bonusFulTracker()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimEsFul()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "compound()": FunctionFragment;
    "compoundForAccount(address)": FunctionFragment;
    "esFul()": FunctionFragment;
    "feeFlpTracker()": FunctionFragment;
    "feeFulTracker()": FunctionFragment;
    "flp()": FunctionFragment;
    "flpManager()": FunctionFragment;
    "flpVester()": FunctionFragment;
    "ful()": FunctionFragment;
    "fulVester()": FunctionFragment;
    "gov()": FunctionFragment;
    "handleRewards(bool,bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "mintAndStakeFlp(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndStakeFlpETH(uint256,uint256)": FunctionFragment;
    "pendingReceivers(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "signalTransfer(address)": FunctionFragment;
    "stakeEsFul(uint256)": FunctionFragment;
    "stakeFul(uint256)": FunctionFragment;
    "stakeFulForAccount(address,uint256)": FunctionFragment;
    "stakedFlpTracker()": FunctionFragment;
    "stakedFulTracker()": FunctionFragment;
    "unstakeAndRedeemFlp(address,uint256,uint256,address)": FunctionFragment;
    "unstakeAndRedeemFlpETH(uint256,uint256,address)": FunctionFragment;
    "unstakeEsFul(uint256)": FunctionFragment;
    "unstakeFul(uint256)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptTransfer"
      | "batchCompoundForAccounts"
      | "batchStakeFulForAccount"
      | "bnFul"
      | "bonusFulTracker"
      | "claim"
      | "claimEsFul"
      | "claimFees"
      | "compound"
      | "compoundForAccount"
      | "esFul"
      | "feeFlpTracker"
      | "feeFulTracker"
      | "flp"
      | "flpManager"
      | "flpVester"
      | "ful"
      | "fulVester"
      | "gov"
      | "handleRewards"
      | "initialize"
      | "isInitialized"
      | "mintAndStakeFlp"
      | "mintAndStakeFlpETH"
      | "pendingReceivers"
      | "setGov"
      | "signalTransfer"
      | "stakeEsFul"
      | "stakeFul"
      | "stakeFulForAccount"
      | "stakedFlpTracker"
      | "stakedFulTracker"
      | "unstakeAndRedeemFlp"
      | "unstakeAndRedeemFlpETH"
      | "unstakeEsFul"
      | "unstakeFul"
      | "weth"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCompoundForAccounts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeFulForAccount",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "bnFul", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusFulTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimEsFul",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compoundForAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "esFul", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeFlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeFulTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "flp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flpManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "flpVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "ful", values?: undefined): string;
  encodeFunctionData(functionFragment: "fulVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleRewards",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeFlp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeFlpETH",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReceivers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeEsFul",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFul",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFulForAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedFlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedFulTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemFlp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemFlpETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEsFul",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFul",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCompoundForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeFulForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnFul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusFulTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimEsFul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "esFul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeFlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeFulTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flpManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flpVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ful", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeFlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeFlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeEsFul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeFulForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedFlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedFulTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemFlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemFlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEsFul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeFul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "StakeFlp(address,uint256)": EventFragment;
    "StakeFul(address,address,uint256)": EventFragment;
    "UnstakeFlp(address,uint256)": EventFragment;
    "UnstakeFul(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeFlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeFul"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeFlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeFul"): EventFragment;
}

export interface StakeFlpEventObject {
  account: string;
  amount: BigNumber;
}
export type StakeFlpEvent = TypedEvent<
  [string, BigNumber],
  StakeFlpEventObject
>;

export type StakeFlpEventFilter = TypedEventFilter<StakeFlpEvent>;

export interface StakeFulEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type StakeFulEvent = TypedEvent<
  [string, string, BigNumber],
  StakeFulEventObject
>;

export type StakeFulEventFilter = TypedEventFilter<StakeFulEvent>;

export interface UnstakeFlpEventObject {
  account: string;
  amount: BigNumber;
}
export type UnstakeFlpEvent = TypedEvent<
  [string, BigNumber],
  UnstakeFlpEventObject
>;

export type UnstakeFlpEventFilter = TypedEventFilter<UnstakeFlpEvent>;

export interface UnstakeFulEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type UnstakeFulEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeFulEventObject
>;

export type UnstakeFulEventFilter = TypedEventFilter<UnstakeFulEvent>;

export interface RewardRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCompoundForAccounts(
      _accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchStakeFulForAccount(
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bnFul(overrides?: CallOverrides): Promise<[string]>;

    bonusFulTracker(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimEsFul(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compoundForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    esFul(overrides?: CallOverrides): Promise<[string]>;

    feeFlpTracker(overrides?: CallOverrides): Promise<[string]>;

    feeFulTracker(overrides?: CallOverrides): Promise<[string]>;

    flp(overrides?: CallOverrides): Promise<[string]>;

    flpManager(overrides?: CallOverrides): Promise<[string]>;

    flpVester(overrides?: CallOverrides): Promise<[string]>;

    ful(overrides?: CallOverrides): Promise<[string]>;

    fulVester(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    handleRewards(
      _shouldClaimFul: PromiseOrValue<boolean>,
      _shouldStakeFul: PromiseOrValue<boolean>,
      _shouldClaimEsFul: PromiseOrValue<boolean>,
      _shouldStakeEsFul: PromiseOrValue<boolean>,
      _shouldStakeMultiplierPoints: PromiseOrValue<boolean>,
      _shouldClaimWeth: PromiseOrValue<boolean>,
      _shouldConvertWethToEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _weth: PromiseOrValue<string>,
      _ful: PromiseOrValue<string>,
      _esFul: PromiseOrValue<string>,
      _bnFul: PromiseOrValue<string>,
      _flp: PromiseOrValue<string>,
      _stakedFulTracker: PromiseOrValue<string>,
      _bonusFulTracker: PromiseOrValue<string>,
      _feeFulTracker: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      _stakedFlpTracker: PromiseOrValue<string>,
      _flpManager: PromiseOrValue<string>,
      _fulVester: PromiseOrValue<string>,
      _flpVester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    mintAndStakeFlp(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAndStakeFlpETH(
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalTransfer(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFulForAccount(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedFlpTracker(overrides?: CallOverrides): Promise<[string]>;

    stakedFulTracker(overrides?: CallOverrides): Promise<[string]>;

    unstakeAndRedeemFlp(
      _tokenOut: PromiseOrValue<string>,
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAndRedeemFlpETH(
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptTransfer(
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCompoundForAccounts(
    _accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchStakeFulForAccount(
    _accounts: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bnFul(overrides?: CallOverrides): Promise<string>;

  bonusFulTracker(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimEsFul(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compoundForAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  esFul(overrides?: CallOverrides): Promise<string>;

  feeFlpTracker(overrides?: CallOverrides): Promise<string>;

  feeFulTracker(overrides?: CallOverrides): Promise<string>;

  flp(overrides?: CallOverrides): Promise<string>;

  flpManager(overrides?: CallOverrides): Promise<string>;

  flpVester(overrides?: CallOverrides): Promise<string>;

  ful(overrides?: CallOverrides): Promise<string>;

  fulVester(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  handleRewards(
    _shouldClaimFul: PromiseOrValue<boolean>,
    _shouldStakeFul: PromiseOrValue<boolean>,
    _shouldClaimEsFul: PromiseOrValue<boolean>,
    _shouldStakeEsFul: PromiseOrValue<boolean>,
    _shouldStakeMultiplierPoints: PromiseOrValue<boolean>,
    _shouldClaimWeth: PromiseOrValue<boolean>,
    _shouldConvertWethToEth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _weth: PromiseOrValue<string>,
    _ful: PromiseOrValue<string>,
    _esFul: PromiseOrValue<string>,
    _bnFul: PromiseOrValue<string>,
    _flp: PromiseOrValue<string>,
    _stakedFulTracker: PromiseOrValue<string>,
    _bonusFulTracker: PromiseOrValue<string>,
    _feeFulTracker: PromiseOrValue<string>,
    _feeFlpTracker: PromiseOrValue<string>,
    _stakedFlpTracker: PromiseOrValue<string>,
    _flpManager: PromiseOrValue<string>,
    _fulVester: PromiseOrValue<string>,
    _flpVester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  mintAndStakeFlp(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _minUsdg: PromiseOrValue<BigNumberish>,
    _minFlp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAndStakeFlpETH(
    _minUsdg: PromiseOrValue<BigNumberish>,
    _minFlp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingReceivers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalTransfer(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeEsFul(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFul(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFulForAccount(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedFlpTracker(overrides?: CallOverrides): Promise<string>;

  stakedFulTracker(overrides?: CallOverrides): Promise<string>;

  unstakeAndRedeemFlp(
    _tokenOut: PromiseOrValue<string>,
    _flpAmount: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAndRedeemFlpETH(
    _flpAmount: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeEsFul(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeFul(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCompoundForAccounts(
      _accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchStakeFulForAccount(
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bnFul(overrides?: CallOverrides): Promise<string>;

    bonusFulTracker(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimEsFul(overrides?: CallOverrides): Promise<void>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    compound(overrides?: CallOverrides): Promise<void>;

    compoundForAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    esFul(overrides?: CallOverrides): Promise<string>;

    feeFlpTracker(overrides?: CallOverrides): Promise<string>;

    feeFulTracker(overrides?: CallOverrides): Promise<string>;

    flp(overrides?: CallOverrides): Promise<string>;

    flpManager(overrides?: CallOverrides): Promise<string>;

    flpVester(overrides?: CallOverrides): Promise<string>;

    ful(overrides?: CallOverrides): Promise<string>;

    fulVester(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    handleRewards(
      _shouldClaimFul: PromiseOrValue<boolean>,
      _shouldStakeFul: PromiseOrValue<boolean>,
      _shouldClaimEsFul: PromiseOrValue<boolean>,
      _shouldStakeEsFul: PromiseOrValue<boolean>,
      _shouldStakeMultiplierPoints: PromiseOrValue<boolean>,
      _shouldClaimWeth: PromiseOrValue<boolean>,
      _shouldConvertWethToEth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _weth: PromiseOrValue<string>,
      _ful: PromiseOrValue<string>,
      _esFul: PromiseOrValue<string>,
      _bnFul: PromiseOrValue<string>,
      _flp: PromiseOrValue<string>,
      _stakedFulTracker: PromiseOrValue<string>,
      _bonusFulTracker: PromiseOrValue<string>,
      _feeFulTracker: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      _stakedFlpTracker: PromiseOrValue<string>,
      _flpManager: PromiseOrValue<string>,
      _fulVester: PromiseOrValue<string>,
      _flpVester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    mintAndStakeFlp(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeFlpETH(
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalTransfer(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFulForAccount(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedFlpTracker(overrides?: CallOverrides): Promise<string>;

    stakedFulTracker(overrides?: CallOverrides): Promise<string>;

    unstakeAndRedeemFlp(
      _tokenOut: PromiseOrValue<string>,
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeAndRedeemFlpETH(
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StakeFlp(address,uint256)"(
      account?: null,
      amount?: null
    ): StakeFlpEventFilter;
    StakeFlp(account?: null, amount?: null): StakeFlpEventFilter;

    "StakeFul(address,address,uint256)"(
      account?: null,
      token?: null,
      amount?: null
    ): StakeFulEventFilter;
    StakeFul(account?: null, token?: null, amount?: null): StakeFulEventFilter;

    "UnstakeFlp(address,uint256)"(
      account?: null,
      amount?: null
    ): UnstakeFlpEventFilter;
    UnstakeFlp(account?: null, amount?: null): UnstakeFlpEventFilter;

    "UnstakeFul(address,address,uint256)"(
      account?: null,
      token?: null,
      amount?: null
    ): UnstakeFulEventFilter;
    UnstakeFul(
      account?: null,
      token?: null,
      amount?: null
    ): UnstakeFulEventFilter;
  };

  estimateGas: {
    acceptTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCompoundForAccounts(
      _accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchStakeFulForAccount(
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bnFul(overrides?: CallOverrides): Promise<BigNumber>;

    bonusFulTracker(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimEsFul(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compoundForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    esFul(overrides?: CallOverrides): Promise<BigNumber>;

    feeFlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    feeFulTracker(overrides?: CallOverrides): Promise<BigNumber>;

    flp(overrides?: CallOverrides): Promise<BigNumber>;

    flpManager(overrides?: CallOverrides): Promise<BigNumber>;

    flpVester(overrides?: CallOverrides): Promise<BigNumber>;

    ful(overrides?: CallOverrides): Promise<BigNumber>;

    fulVester(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    handleRewards(
      _shouldClaimFul: PromiseOrValue<boolean>,
      _shouldStakeFul: PromiseOrValue<boolean>,
      _shouldClaimEsFul: PromiseOrValue<boolean>,
      _shouldStakeEsFul: PromiseOrValue<boolean>,
      _shouldStakeMultiplierPoints: PromiseOrValue<boolean>,
      _shouldClaimWeth: PromiseOrValue<boolean>,
      _shouldConvertWethToEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _weth: PromiseOrValue<string>,
      _ful: PromiseOrValue<string>,
      _esFul: PromiseOrValue<string>,
      _bnFul: PromiseOrValue<string>,
      _flp: PromiseOrValue<string>,
      _stakedFulTracker: PromiseOrValue<string>,
      _bonusFulTracker: PromiseOrValue<string>,
      _feeFulTracker: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      _stakedFlpTracker: PromiseOrValue<string>,
      _flpManager: PromiseOrValue<string>,
      _fulVester: PromiseOrValue<string>,
      _flpVester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndStakeFlp(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAndStakeFlpETH(
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalTransfer(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFulForAccount(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedFlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    stakedFulTracker(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeAndRedeemFlp(
      _tokenOut: PromiseOrValue<string>,
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAndRedeemFlpETH(
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCompoundForAccounts(
      _accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchStakeFulForAccount(
      _accounts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bnFul(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusFulTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimEsFul(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compoundForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    esFul(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeFlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeFulTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flpVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleRewards(
      _shouldClaimFul: PromiseOrValue<boolean>,
      _shouldStakeFul: PromiseOrValue<boolean>,
      _shouldClaimEsFul: PromiseOrValue<boolean>,
      _shouldStakeEsFul: PromiseOrValue<boolean>,
      _shouldStakeMultiplierPoints: PromiseOrValue<boolean>,
      _shouldClaimWeth: PromiseOrValue<boolean>,
      _shouldConvertWethToEth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _weth: PromiseOrValue<string>,
      _ful: PromiseOrValue<string>,
      _esFul: PromiseOrValue<string>,
      _bnFul: PromiseOrValue<string>,
      _flp: PromiseOrValue<string>,
      _stakedFulTracker: PromiseOrValue<string>,
      _bonusFulTracker: PromiseOrValue<string>,
      _feeFulTracker: PromiseOrValue<string>,
      _feeFlpTracker: PromiseOrValue<string>,
      _stakedFlpTracker: PromiseOrValue<string>,
      _flpManager: PromiseOrValue<string>,
      _fulVester: PromiseOrValue<string>,
      _flpVester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndStakeFlp(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAndStakeFlpETH(
      _minUsdg: PromiseOrValue<BigNumberish>,
      _minFlp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalTransfer(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFulForAccount(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedFlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedFulTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeAndRedeemFlp(
      _tokenOut: PromiseOrValue<string>,
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndRedeemFlpETH(
      _flpAmount: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeEsFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeFul(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
