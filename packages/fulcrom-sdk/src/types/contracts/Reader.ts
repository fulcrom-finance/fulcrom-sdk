/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ReaderInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "getAmountOut(address,address,address,uint256)": FunctionFragment;
    "getFees(address,address[])": FunctionFragment;
    "getFundingRates(address,address,address[])": FunctionFragment;
    "getMaxAmountIn(address,address,address)": FunctionFragment;
    "getPairInfo(address,address[])": FunctionFragment;
    "getPositions(address,address,address[],address[],bool[])": FunctionFragment;
    "getStakingInfo(address,address[])": FunctionFragment;
    "getTokenBalances(address,address[])": FunctionFragment;
    "getTokenBalancesWithSupplies(address,address[])": FunctionFragment;
    "getTokenSupply(address,address[])": FunctionFragment;
    "getTotalStaked(address[])": FunctionFragment;
    "getVaultTokenInfo(address,address,uint256,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "getAmountOut"
      | "getFees"
      | "getFundingRates"
      | "getMaxAmountIn"
      | "getPairInfo"
      | "getPositions"
      | "getStakingInfo"
      | "getTokenBalances"
      | "getTokenBalancesWithSupplies"
      | "getTokenSupply"
      | "getTotalStaked"
      | "getVaultTokenInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingRates",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalancesWithSupplies",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSupply",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTokenInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalancesWithSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTokenInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountOut(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getFees(
      _vault: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFundingRates(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMaxAmountIn(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPairInfo(
      _factory: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPositions(
      _vault: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _collateralTokens: PromiseOrValue<string>[],
      _indexTokens: PromiseOrValue<string>[],
      _isLong: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getStakingInfo(
      _account: PromiseOrValue<string>,
      _yieldTrackers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenBalances(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenBalancesWithSupplies(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenSupply(
      _token: PromiseOrValue<string>,
      _excludedAccounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalStaked(
      _yieldTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVaultTokenInfo(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOut(
    _vault: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getFees(
    _vault: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFundingRates(
    _vault: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMaxAmountIn(
    _vault: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairInfo(
    _factory: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositions(
    _vault: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _collateralTokens: PromiseOrValue<string>[],
    _indexTokens: PromiseOrValue<string>[],
    _isLong: PromiseOrValue<boolean>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getStakingInfo(
    _account: PromiseOrValue<string>,
    _yieldTrackers: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenBalances(
    _account: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenBalancesWithSupplies(
    _account: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenSupply(
    _token: PromiseOrValue<string>,
    _excludedAccounts: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalStaked(
    _yieldTokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVaultTokenInfo(
    _vault: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getFees(
      _vault: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFundingRates(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMaxAmountIn(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfo(
      _factory: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositions(
      _vault: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _collateralTokens: PromiseOrValue<string>[],
      _indexTokens: PromiseOrValue<string>[],
      _isLong: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getStakingInfo(
      _account: PromiseOrValue<string>,
      _yieldTrackers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenBalances(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenBalancesWithSupplies(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenSupply(
      _token: PromiseOrValue<string>,
      _excludedAccounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(
      _yieldTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVaultTokenInfo(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      _vault: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingRates(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxAmountIn(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfo(
      _factory: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositions(
      _vault: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _collateralTokens: PromiseOrValue<string>[],
      _indexTokens: PromiseOrValue<string>[],
      _isLong: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingInfo(
      _account: PromiseOrValue<string>,
      _yieldTrackers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalances(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalancesWithSupplies(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSupply(
      _token: PromiseOrValue<string>,
      _excludedAccounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(
      _yieldTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultTokenInfo(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      _vault: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingRates(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxAmountIn(
      _vault: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairInfo(
      _factory: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(
      _vault: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _collateralTokens: PromiseOrValue<string>[],
      _indexTokens: PromiseOrValue<string>[],
      _isLong: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingInfo(
      _account: PromiseOrValue<string>,
      _yieldTrackers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalances(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalancesWithSupplies(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSupply(
      _token: PromiseOrValue<string>,
      _excludedAccounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStaked(
      _yieldTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultTokenInfo(
      _vault: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
